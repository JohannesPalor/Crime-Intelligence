@model CIS.Models.ReportsModel


@{
    ViewBag.Title = "Home Page";
}

<head>
    <link href="~/Content/font-awesome.min.css" rel="stylesheet" />
</head>



<style>
    /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
    #map {
        height: 100%;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #mapOptions {
        width: 220px;
        text-align: center;
        position: fixed;
        top: 50px;
        right: 50px;
    }
</style>

<div class="row" id="map">
</div>


<div class="list-group" id="mapOptions">
    <a href="#" class="list-group-item" data-toggle="modal" data-target="#modalReport">Report Crime Incident</a>
    
    <a href="#" class="list-group-item list-group-item-danger" onclick="hide();">Cancel</a>
</div>



@if (Session["userid"] == null)
{
    <div class="modal fade" id="modalReport" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">



        <div class="modal-dialog modal-md">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Login</h2>
                    <br />
                    <h5 class="modal-title">You must login first to create a report</h5>
                </div>



                <div class="row">

                    <br />
                    <div class="col-lg-2"></div>


                    @using (Html.BeginForm("Login", "Account"))
                    {
                        @Html.AntiForgeryToken()

                        <div class="col-lg-10 form-horizontal">

                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            @Html.Raw(ViewBag.Message)
                            <div class="row"></div>

                            <div class="form-group">

                                @Html.LabelFor(model => model.Login.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Login.Email, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Login.Email, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Login.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Login.Password, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Login.Password, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-6">


                                    <button type="submit" name="Submit" class="btn btn-success btn-lg col-xs-12 center-block">
                                        Login
                                    </button>

                                    <br />
                                    <br />
                                    <p class="text-center">OR</p>

                                    <a href="@Url.Action("Create","User")" class="btn btn-default btn-lg col-xs-12 center-block">
                                        Create an Account
                                    </a>

                                </div>
                            </div>
                        </div>
                    }

                </div>


            </div>
        </div>
    </div>

}
else
{

    <div class="modal fade" id="modalReport" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">



        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h2 class="modal-title">Report a Crime</h2>
                </div>



                <div class="row">

                    <br />
                    <div class="col-lg-1"></div>
                    <div class="col-lg-5">
                        @using (Html.BeginForm("Index", "Home", FormMethod.Post,
                            new
                            {
                                @enctype = "multipart/form-data",
                                @name = "image"
                            }))
                        {
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal">

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                                <div class="form-group">
                                    @Html.LabelFor(model => model.CrimeTypeId, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        @Html.DropDownListFor(model => model.CrimeTypeId,
                                            new SelectList(Model.CrimeTypes, "TypeId", "CrimeName"),
                                            "Select Type of Crime...",
                                            new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.CrimeTypeId, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.Image, new
                               {
                                   htmlAttributes = new
                                   {
                                       @class = "form-control",
                                       @type = "file",
                                       @accept = "image/*",
                                       @name = "image"
                                   }
                               })
                                        @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                                    </div>
                                </div>







                                <div class="form-group">
                                    @Html.LabelFor(model => model.time, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.time, new { htmlAttributes = new { @class = "form-control form_datetime" } })
                                        @Html.ValidationMessageFor(model => model.time, "", new { @class = "text-danger" })
                                    </div>
                                </div>


                                @Html.HiddenFor(model => model.longitude, new { id = "longitude" })

                                @Html.HiddenFor(model => model.latitude, new { id = "latitude" })


                                <div class="form-group">
                                    @Html.LabelFor(model => model.incident_details, htmlAttributes: new { @class = "control-label col-md-4" })
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.incident_details, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.incident_details, "", new { @class = "text-danger" })
                                    </div>
                                </div>





                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">


                                        <button type="submit" name="Submit" class="btn btn-success btn-lg btn-block">

                                            Submit Crime Report
                                        </button>
                                    </div>
                                </div>
                            </div>


                        }
                    </div>
                    <div class="col-lg-6">
                        <h3>Reporting Guidelines</h3>

                        <h5>1) Report only crimes that have actually transpired.</h5>

                        <h5>2) Philippine National Police (PNP) has the right to verify the report once submitted.</h5>

                        <h5>3) PNP may call the number of the reporter to verify details.</h5>

                        <h5>4) To protect veracity of reports, fake reporters may be charged of violating CIS terms and policies.</h5>

                        <h5>5) In case of emergency, call 887-8888 (PNP).</h5>
                    </div>

                </div>


            </div>
        </div>
    </div>

}











@section Scripts
{





    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/Scripts/bootstrap-datetimepicker.min.js"></script>
    <script type="text/javascript">
        $(".form_datetime").datetimepicker({
            format: 'yyyy-mm-dd hh:ii',
            autoclose: true,
            todayBtn: true,
            startDate: "2018-08-01 10:00",
            minuteStep: 10
        });
    </script>

    <script type="text/javascript">


        var map;
        var marker;
        var active = 0;


        function initMap() {


            //Setting up Map
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 14.599512, lng: 120.984222 },
                zoom: 14,
                styles: [
                    { elementType: 'geometry', stylers: [{ color: '#242f3e' }] },
                    { elementType: 'labels.text.stroke', stylers: [{ color: '#242f3e' }] },
                    { elementType: 'labels.text.fill', stylers: [{ color: '#746855' }] },
                    {
                        featureType: 'administrative.locality',
                        elementType: 'labels.text.fill',
                        stylers: [{ color: '#d59563' }]
                    },
                    {
                        featureType: 'poi',
                        elementType: 'labels.text.fill',
                        stylers: [{ color: '#d59563' }]
                    },
                    {
                        featureType: 'poi.park',
                        elementType: 'geometry',
                        stylers: [{ color: '#263c3f' }]
                    },
                    {
                        featureType: 'poi.park',
                        elementType: 'labels.text.fill',
                        stylers: [{ color: '#6b9a76' }]
                    },
                    {
                        featureType: 'road',
                        elementType: 'geometry',
                        stylers: [{ color: '#38414e' }]
                    },
                    {
                        featureType: 'road',
                        elementType: 'geometry.stroke',
                        stylers: [{ color: '#212a37' }]
                    },
                    {
                        featureType: 'road',
                        elementType: 'labels.text.fill',
                        stylers: [{ color: '#9ca5b3' }]
                    },
                    {
                        featureType: 'road.highway',
                        elementType: 'geometry',
                        stylers: [{ color: '#746855' }]
                    },
                    {
                        featureType: 'road.highway',
                        elementType: 'geometry.stroke',
                        stylers: [{ color: '#1f2835' }]
                    },
                    {
                        featureType: 'road.highway',
                        elementType: 'labels.text.fill',
                        stylers: [{ color: '#f3d19c' }]
                    },
                    {
                        featureType: 'transit',
                        elementType: 'geometry',
                        stylers: [{ color: '#2f3948' }]
                    },
                    {
                        featureType: 'transit.station',
                        elementType: 'labels.text.fill',
                        stylers: [{ color: '#d59563' }]
                    },
                    {
                        featureType: 'water',
                        elementType: 'geometry',
                        stylers: [{ color: '#17263c' }]
                    },
                    {
                        featureType: 'water',
                        elementType: 'labels.text.fill',
                        stylers: [{ color: '#515c6d' }]
                    },
                    {
                        featureType: 'water',
                        elementType: 'labels.text.stroke',
                        stylers: [{ color: '#17263c' }]
                    },
                    {
                        featureType: "transit",
                        elementType: "all",
                        stylers: [
                            { visibility: "off" }
                        ]
                    },
                    {
                        featureType: "administrative",
                        elementType: "labels.icon",
                        stylers: [
                            { visibility: "off" }
                        ]
                    },
                    {
                        featureType: "road",
                        elementType: "labels",
                        stylers: [
                            { visibility: "off" }
                        ]
                    }
                ]
            });

            var myLatLng = [];



            var viewBag = @Html.Raw(Json.Encode(ViewBag.LatLongArray));



            for (var j = 0; j < viewBag.length; j++) {

                myLatLng.push(['', viewBag[j].latitude, viewBag[j].longitude,0]);
            }
            for (ctr = 0; ctr < viewBag.length; ctr++) {




                var logo;
                if (viewBag[ctr].CrimeTypeId == 1 || viewBag[ctr].CrimeTypeId == 2) {
                    logo = '\uf21b';
                }
                else if (viewBag[ctr].CrimeTypeId == 3) {
                    logo = '\uf224';
                }
                else if (viewBag[ctr].CrimeTypeId == 6) {
                    logo = '\uf255';
                }
                else if (viewBag[ctr].CrimeTypeId == 7) {
                    logo = '\uf0fc';
                }
                var contentString = '<div class=" ">' +
                    '<div class="panel panel-title"'+
                    '<div class=""><h3>Details</h3></div>' +
                    '&nbsp<div class=""><h6>' + viewBag[ctr].votes + ' <i class="fa fa-eye"></i></h6></div></hr>' +
                    '</div>'+
                    '<div class="panel-body">' +
                    '<p><b>Crime Type:</b> ' + viewBag[ctr].CrimeName + '</p>' +
                    '<p><b>Details:</b> ' + viewBag[ctr].incident_details + '</p>' +
                    '<p><b>Suspects:</b> ' + viewBag[ctr].SuspectCount + '</p>' +
                   
                    '<a class="btn btn-success col-lg-12" href="@Url.Action("Details", "Reports")' + "/" + viewBag[ctr].CrimeId+'" >View Incident Details</a>'+
                    '</div>' +
                    '</div>';

                var infowindow = new google.maps.InfoWindow();


                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(myLatLng[ctr][1], myLatLng[ctr][2]),
                    label: {
                        fontFamily: 'Fontawesome',
                        text: logo,
                    },
                    map: map
                });

                google.maps.event.addListener(marker, 'click', (function (marker, contentString, infowindow) {
                    return function () {
                        infowindow.setContent(contentString);
                        infowindow.open(map, marker);
                    };
                })(marker, contentString, infowindow));


            }




            //Setting map options
            map.setOptions({ draggable: true });
            infoWindow = new google.maps.InfoWindow;


            //Adding Listener
            google.maps.event.addListener(map, 'rightclick', function (event) {

                //alert(event.latLng);

                if (active == 0) {
                    $("#mapOptions").css({
                        'top': event.pixel.y - 60,
                        'left': event.pixel.x + 30
                    });
                    $("#mapOptions").fadeIn();
                    active++;





                    marker = new google.maps.Marker({
                        position: event.latLng,
                        map: map

                    });

                    $("#longitude").val(event.latLng.lng());
                    $("#latitude").val(event.latLng.lat());

                }



            });


        }


        $("#mapOptions").hide();

        function hide() {
            active--;
            $("#mapOptions").fadeOut();
            marker.setMap(null);
        }




    </script>
    <!--<script src="@Url.Content("~/Scripts/gmaps.js")"></script>-->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDx_kiLyXQBUWuVFMB5iLI-aE3PnhimYFw&callback=initMap" async defer></script>











    }